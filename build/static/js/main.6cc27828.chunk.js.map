{"version":3,"sources":["app/rivescript/brain.rive","app/assets/frank-deboosere.jpg","app/config/index.js","app/services/chatbot.service.js","app/components/ChatDisplay/index.jsx","app/App.jsx","serviceWorker.js","index.js"],"names":["module","exports","openWeatherConfig","process","ChatbotContext","createContext","ChatbotProvider","children","useState","bot","setBot","addToDisplay","setAddToDisplay","a","console","log","loadFile","Brain","sortReplies","setUservar","reply","input","getWeather","rs","args","fetchUrl","fetch","response","json","data","finalResponse","parseInt","main","temp","name","wind","speed","rain","callback","weather","description","onClick","sayAsUser","message","trim","replyFromBot","useEffect","RiveScript","setSubroutine","initializeBot","botReady","Provider","value","inputValue","setInputValue","messages","setMessages","chatDisplayRef","useRef","useContext","botReply","isUser","prev","length","className","current","scrollTo","top","scrollHeight","ref","map","messageObject","index","key","classNames","autoComplete","onSubmit","e","preventDefault","send","type","id","onChange","target","autoFocus","App","src","Frank","alt","ChatDisplay","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.6cc27828.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brain.ae14195c.rive\";","module.exports = __webpack_public_path__ + \"static/media/frank-deboosere.4795c658.jpg\";","export const openWeatherConfig = {\r\n  baseURL: process.env.REACT_APP_OPEN_WEATHER_BASE_URL,\r\n  ApiKey: process.env.REACT_APP_OPEN_WEATHER_API_KEY,\r\n};","import {\r\n\tdefault as React,\r\n\tuseContext,\r\n\tcreateContext,\r\n\tuseState,\r\n\tuseEffect,\r\n\tuseCallback,\r\n} from 'react';\r\nimport RiveScript from 'rivescript';\r\nimport { openWeatherConfig } from '../config';\r\n\r\nimport Brain from '../rivescript/brain.rive';\r\n\r\nconst ChatbotContext = createContext();\r\nconst useChatbot = () => useContext(ChatbotContext);\r\n\r\nconst ChatbotProvider = ({ children }) => {\r\n\tconst [bot, setBot] = useState();\r\n\tconst [addToDisplay, setAddToDisplay] = useState();\r\n\r\n\tuseEffect(() => {\r\n    setBot(new RiveScript());\r\n    console.log('Triggers: weer, temperatuur, wind, regen');\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!bot || !addToDisplay) return;\r\n\t\tbot.setSubroutine('getWeather', getWeather);\r\n\t}, [bot, addToDisplay]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!bot) return;\r\n\t\tinitializeBot();\r\n\t}, [bot]);\r\n\t// const findAllPosts = async (query = null) => {\r\n\t// }\r\n\r\n\t// Initialiseer de chatbot\r\n\tasync function initializeBot() {\r\n\t\tconsole.log(bot);\r\n\t\ttry {\r\n\t\t\t// Laad het RiveScript bestand\r\n\t\t\tawait bot.loadFile(Brain);\r\n\r\n\t\t\t// Verwerk en sorteer de triggers en antwoorden\r\n\t\t\tbot.sortReplies();\r\n\r\n\t\t\t// bot.setSubroutine('getWeather', getWeather);\r\n      // bot.setSubroutine('getWeather', getWeather2);\r\n      bot.setUservar('local-user', 'location', 'gent')\r\n\r\n\t\t\tconsole.log('De chatbot is geïnitialiseerd!');\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction reply(input) {\r\n\t\treturn bot.reply('local-user', input);\r\n\t}\r\n\r\n\tasync function getWeather(rs, args) {\r\n\t\tconsole.log(args);\r\n\t\t// const fetchUrl = `${openWeatherConfig.baseURL}weather?q=Gent,be&units=metric&lang=nl&APPID=${openWeatherConfig.ApiKey}`;\r\n\t\tconst fetchUrl = `${openWeatherConfig.baseURL}weather?q=${args[0]}&units=metric&lang=nl&APPID=${openWeatherConfig.ApiKey}`;\r\n\t\tconst response = await fetch(fetchUrl);\r\n\t\tconst data = await response.json();\r\n\r\n\t\tlet finalResponse = '';\r\n\r\n\t\tswitch (args[1]) {\r\n\t\t\tcase 'temperatuur':\r\n\t\t\t\tfinalResponse = `Het is nu ${parseInt(data.main.temp)}°C in ${ data.name }.`;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'wind':\r\n\t\t\t\tfinalResponse = `Er zijn momenteel windsnelheden van ${parseInt(data.wind.speed)} meter per seconde in ${ data.name }.`;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'regen':\r\n        if (data.rain) {\r\n          finalResponse = `Het voorbije uur heeft het ${parseInt(data.rain.rain['1h'])}mm/m² geregend in ${ data.name }.`;\r\n        } else {\r\n          finalResponse = `Het voorbije uur heeft het niet geregend in ${ data.name }.`;\r\n        }\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n        addToDisplay.callback(`De weersvoorspelling voor vandaag is ${data.weather[0].description} in ${ data.name }.`);\r\n        addToDisplay.callback(<button onClick={() => sayAsUser('temperatuur')}>Temperatuur</button>);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tconsole.log(fetchUrl);\r\n\t\tconsole.log(data);\r\n\t\t// console.log(sayAsUser);\r\n\t\treturn finalResponse;\r\n\t}\r\n\r\n\tasync function sayAsUser(message) {\r\n\t\t// Voeg het bericht toe aan het chatvenster\r\n\t\taddToDisplay.callback(message.trim(), true);\r\n\r\n\t\t// Verwerk het bericht door de chatbot en krijg een gepast antwoord\r\n\t\tconst replyFromBot = await reply(message);\r\n\t\tconsole.log(replyFromBot);\r\n\r\n\t\t// Voeg het antwoord toe aan het chatvenster\r\n\t\taddToDisplay.callback(replyFromBot.trim());\r\n\t\tconsole.log(message);\r\n\t}\r\n\r\n\t// function showOptions() {\r\n\r\n\t// }\r\n\r\n\t// function setAddToDisplayCB(cb) {\r\n\t// \tsetAddToDisplay({cb});\r\n\t// }\r\n\r\n\tconst exports = {\r\n\t\tsetAddToDisplay,\r\n\t\treply,\r\n\t\tbotReady: !!bot,\r\n\t};\r\n\r\n\treturn (\r\n\t\t<ChatbotContext.Provider value={exports}>\r\n\t\t\t{children}\r\n\t\t</ChatbotContext.Provider>\r\n\t);\r\n};\r\n\r\nexport { ChatbotContext, ChatbotProvider, useChatbot };\r\n","import React, { useRef } from 'react';\r\nimport { useState } from 'react';\r\nimport { default as classNames } from 'classnames';\r\nimport { useEffect } from 'react';\r\nimport { useChatbot } from '../../services';\r\n\r\nexport default () => {\r\n\tconst [inputValue, setInputValue] = useState('');\r\n\t// {message, isUser} message = text/html\r\n\tconst [messages, setMessages] = useState([]);\r\n\tconst chatDisplayRef = useRef(null);\r\n\tconst { reply: botReply, setAddToDisplay, botReady } = useChatbot();\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!botReady) return;\r\n\t\tsetAddToDisplay({ callback: addToDisplay });\r\n\t\taddToDisplay(\r\n\t\t\t<>\r\n\t\t\t\t<button className=\"chatButton\" onClick={() => sayAsUser('temperatuur')}>Temperatuur</button>\r\n\t\t\t\t<button className=\"chatButton\" onClick={() => sayAsUser('wind')}>Wind</button>\r\n\t\t\t\t<button className=\"chatButton\" onClick={() => sayAsUser('regen')}>Regen</button>\r\n\t\t\t</>\r\n\t\t);\r\n\t}, [botReady]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!chatDisplayRef.current) return;\r\n\r\n\t\tchatDisplayRef.current.scrollTo({\r\n\t\t\ttop: chatDisplayRef.current.scrollHeight,\r\n\t\t});\r\n\t}, [messages]);\r\n\r\n\t// message = text/html\r\n\tfunction addToDisplay(message, isUser = false) {\r\n\t\tif (message === '') return;\r\n\t\tsetMessages((prev) => [\r\n\t\t\t...prev,\r\n\t\t\t{\r\n\t\t\t\tmessage,\r\n\t\t\t\tisUser,\r\n\t\t\t},\r\n\t\t]);\r\n\t}\r\n\r\n\t// Verstuur het bericht\r\n\tasync function send() {\r\n\t\t// Stop de functie als er geen input is\r\n\t\tif (inputValue.trim().length < 1) {\r\n\t\t\tsetInputValue('');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tsayAsUser(inputValue);\r\n\r\n\t\t// chatInput.value = '';\r\n\t\tsetInputValue('');\r\n\t}\r\n\r\n\tasync function sayAsUser(message) {\r\n\t\t// Voeg het bericht toe aan het chatvenster\r\n\t\taddToDisplay(message.trim(), true);\r\n\r\n\t\t// Verwerk het bericht door de chatbot en krijg een gepast antwoord\r\n\t\tconst reply = await botReply(message);\r\n\r\n\t\t// Voeg het antwoord toe aan het chatvenster\r\n\t\taddToDisplay(reply.trim());\r\n\t}\r\n\r\n\t// Luister naar veranderingen van het inputveld\r\n\tfunction onInputChange(e) {\r\n\t\t// Verwijder de witruimte van de input en sla deze op\r\n\t\tsetInputValue(e.target.value);\r\n\t}\r\n\r\n\t// Luister naar het klikken op de 'Verstuur'-knop (en het drukken op de Enter-toets)\r\n\tfunction onSubmit(e) {\r\n\t\t// Voorkom dat het scherm ververst wordt\r\n\t\te.preventDefault();\r\n\r\n\t\t// Verstuur de opgeslagen input\r\n\t\tsend();\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"chatContainer\">\r\n\t\t\t<div className=\"chatDisplay\" ref={chatDisplayRef}>\r\n\t\t\t\t{messages.map((messageObject, index) => (\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tkey={`message-${index}`}\r\n\t\t\t\t\t\tclassName={classNames(\r\n\t\t\t\t\t\t\t'chatMessage',\r\n\t\t\t\t\t\t\t`${messageObject.isUser && 'chatMessage--user'}`\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{messageObject.message}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t\t<form className=\"chatForm\" autoComplete=\"off\" onSubmit={onSubmit}>\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName=\"chatInput\"\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tname=\"chatInput\"\r\n\t\t\t\t\tid=\"chatInput\"\r\n\t\t\t\t\tonChange={onInputChange}\r\n\t\t\t\t\tvalue={inputValue}\r\n\t\t\t\t\tautoFocus\r\n\t\t\t\t/>\r\n\t\t\t\t<button type=\"submit\" className=\"chatSend\">\r\n\t\t\t\t\tVerstuur\r\n\t\t\t\t</button>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React from 'react';\nimport './app.scss';\nimport ChatDisplay from './components/ChatDisplay';\n\nimport Frank from './assets/frank-deboosere.jpg';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<header className=\"appHeader container\">\n\t\t\t\t<div className=\"inner\">\n          <img src={Frank} alt=\"Frank Deboosere\" />\n\t\t\t\t\t<h1>Frankbot</h1>\n\t\t\t\t</div>\n\t\t\t</header>\n\t\t\t<main className=\"appMain container fullHeight\">\n\t\t\t\t<div className=\"inner fullHeight\">\n\t\t\t\t\t<ChatDisplay />\n\t\t\t\t</div>\n\t\t\t</main>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport { ChatbotProvider } from './app/services';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<ChatbotProvider>\n\t\t\t<App />\n\t\t</ChatbotProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}