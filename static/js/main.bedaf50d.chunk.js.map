{"version":3,"sources":["app/assets/frank-deboosere.jpg","app/rivescript/brain.rive","app/config/index.js","app/services/chatbot.service.js","app/components/ChatDisplay/index.jsx","app/App.jsx","index.js"],"names":["module","exports","openWeatherConfig","process","ChatbotContext","createContext","ChatbotProvider","children","useState","bot","setBot","addToDisplay","setAddToDisplay","a","loadFile","Brain","sortReplies","setUservar","console","log","reply","input","getWeather","rs","args","fetchUrl","fetch","response","json","data","finalResponse","parseInt","main","temp","name","wind","speed","rain","callback","weather","description","className","onClick","sayAsUser","message","trim","replyFromBot","useEffect","RiveScript","setSubroutine","initializeBot","botReady","Provider","value","inputValue","setInputValue","messages","setMessages","chatDisplayRef","useRef","useContext","botReply","isUser","prev","length","current","scrollTo","top","scrollHeight","ref","map","messageObject","index","key","classNames","autoComplete","onSubmit","e","preventDefault","send","type","id","onChange","target","autoFocus","App","src","Frank","alt","ChatDisplay","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bedaf50d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/frank-deboosere.4795c658.jpg\";","module.exports = __webpack_public_path__ + \"static/media/brain.68699961.rive\";","export const openWeatherConfig = {\r\n  baseURL: process.env.REACT_APP_OPEN_WEATHER_BASE_URL,\r\n  ApiKey: process.env.REACT_APP_OPEN_WEATHER_API_KEY,\r\n};","import {\r\n\tdefault as React,\r\n\tuseContext,\r\n\tcreateContext,\r\n\tuseState,\r\n\tuseEffect,\r\n} from 'react';\r\nimport RiveScript from 'rivescript';\r\nimport { openWeatherConfig } from '../config';\r\n\r\nimport Brain from '../rivescript/brain.rive';\r\n\r\n// De context\r\nconst ChatbotContext = createContext();\r\n\r\n// De hook\r\nconst useChatbot = () => useContext(ChatbotContext);\r\n\r\n// De context provider\r\nconst ChatbotProvider = ({ children }) => {\r\n\t// De instantie van de chatbot\r\n\tconst [bot, setBot] = useState();\r\n\t// De 'addToDisplay'-functie (gelinkt vanuit het 'ChatDisplay'-component)\r\n\tconst [addToDisplay, setAddToDisplay] = useState();\r\n\r\n\t// Wanneer dit component geïnitialiseerd wordt:\r\n\tuseEffect(() => {\r\n\t\t// Instantieer de chatbot en voeg deze toe aan de 'bot'-state\r\n\t\tsetBot(new RiveScript());\r\n\t}, []);\r\n\r\n\t// Wanneer de chatbot wel/niet geïnstantieerd wordt,\r\n\t// en/of wanneer de 'addToDisplay'-functie gelinkt wordt:\r\n\tuseEffect(() => {\r\n\t\t// Voer volgende code niet uit als de bot niet geïnstantieerd of de 'addToDisplay'-functie niet gelinkt is\r\n\t\tif (!bot || !addToDisplay) return;\r\n\r\n\t\t// Voeg de functie 'getWeather' toe aan het RiveScript-bestand\r\n\t\tbot.setSubroutine('getWeather', getWeather);\r\n\t}, [bot, addToDisplay]);\r\n\r\n\t// Wanneer de chatbot wel/niet geïnstantieerd wordt:\r\n\tuseEffect(() => {\r\n\t\t// Initialiseer de chatbot als deze nog niet geïnstantieerd is\r\n\t\tif (!bot) return;\r\n\t\tinitializeBot();\r\n\t}, [bot]);\r\n\r\n\t// Initialiseer de chatbot\r\n\tasync function initializeBot() {\r\n\t\ttry {\r\n\t\t\t// Laad het RiveScript bestand\r\n\t\t\tawait bot.loadFile(Brain);\r\n\r\n\t\t\t// Verwerk en sorteer de triggers en antwoorden\r\n\t\t\tbot.sortReplies();\r\n\r\n\t\t\t// Voeg de variabele 'location', met bijbehorende waarde 'gent' toe aan het RiveScript-bestand\r\n\t\t\tbot.setUservar('local-user', 'location', 'gent');\r\n\r\n\t\t\tconsole.log('De chatbot is geïnitialiseerd!');\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t}\r\n\r\n\t// Verwerk een input door de bot\r\n\tfunction reply(input) {\r\n\t\treturn bot.reply('local-user', input);\r\n\t}\r\n\r\n\t// Verkrijg het weer via de Open Weather API\r\n\tasync function getWeather(rs, args) {\r\n\t\t// Verkrijg het weer via de Open Weather API\r\n\t\tconst fetchUrl = `${openWeatherConfig.baseURL}weather?q=${args[0]}&units=metric&lang=nl&APPID=${openWeatherConfig.ApiKey}`;\r\n\t\tconst response = await fetch(fetchUrl);\r\n\t\tconst data = await response.json();\r\n\r\n\t\t// Het laatst te geven bericht\r\n\t\tlet finalResponse = '';\r\n\r\n\t\t// Genereer antwoorden die bij het tweede argument passen (met de verkregen data)\r\n\t\tswitch (args[1]) {\r\n\t\t\tcase 'temperatuur':\r\n\t\t\t\tfinalResponse = `Het is nu ${parseInt(data.main.temp)}°C in ${data.name}.`;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'wind':\r\n\t\t\t\tfinalResponse = `Er zijn momenteel windsnelheden van ${parseInt(data.wind.speed)} meter per seconde in ${data.name}.`;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'regen':\r\n\t\t\t\tif (data.rain) {\r\n\t\t\t\t\tfinalResponse = `Het voorbije uur heeft het ${parseInt(data.rain.rain['1h'])}mm/m² geregend in ${data.name}.`;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfinalResponse = `Het voorbije uur heeft het niet geregend in ${data.name}.`;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t// Genereer een antwoord als er geen tweede argument is\r\n\t\t\tdefault:\r\n\t\t\t\t// Voeg direct een bericht toe aan het chatvenster (niet via een antwoord in het RiveScript-bestand)\r\n\t\t\t\taddToDisplay.callback(\r\n\t\t\t\t\t`De weersvoorspelling voor vandaag is ${data.weather[0].description} in ${data.name}.`\r\n\t\t\t\t);\r\n\t\t\t\t// Voeg direct knoppen toe aan het chatvenster\r\n\t\t\t\taddToDisplay.callback(\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tclassName=\"chatButton\"\r\n\t\t\t\t\t\t\tonClick={() => sayAsUser('temperatuur')}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tTemperatuur\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button className=\"chatButton\" onClick={() => sayAsUser('wind')}>\r\n\t\t\t\t\t\t\tWind\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button className=\"chatButton\" onClick={() => sayAsUser('regen')}>\r\n\t\t\t\t\t\t\tRegen\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</>\r\n\t\t\t\t);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t// Geef het laats te geven bericht terug (als antwoord) aan het RiveScript-bestand\r\n\t\treturn finalResponse;\r\n\t}\r\n\r\n\t// Verstuur een bericht in naam van de gebruiker\r\n\tasync function sayAsUser(message) {\r\n\t\t// Voeg het bericht toe aan het chatvenster\r\n\t\taddToDisplay.callback(message.trim(), true);\r\n\r\n\t\t// Verwerk het bericht door de chatbot en krijg een gepast antwoord\r\n\t\tconst replyFromBot = await reply(message);\r\n\r\n\t\t// Voeg het antwoord toe aan het chatvenster\r\n\t\taddToDisplay.callback(replyFromBot.trim());\r\n\t}\r\n\r\n  // Maak bepaalde functies/variabelen beschikbaar in de context provider\r\n\tconst exports = {\r\n\t\tsetAddToDisplay,\r\n\t\treply,\r\n\t\tbotReady: !!bot,\r\n\t};\r\n\r\n  // Geef de context provider terug\r\n\treturn (\r\n\t\t<ChatbotContext.Provider value={exports}>\r\n\t\t\t{children}\r\n\t\t</ChatbotContext.Provider>\r\n\t);\r\n};\r\n\r\nexport { ChatbotContext, ChatbotProvider, useChatbot };\r\n","import React, { useRef } from 'react';\r\nimport { useState } from 'react';\r\nimport { default as classNames } from 'classnames';\r\nimport { useEffect } from 'react';\r\nimport { useChatbot } from '../../services';\r\n\r\nexport default () => {\r\n    // De inputwaarde van de gebruiker\r\n    const [inputValue, setInputValue] = useState('');\r\n    // Alle berichten die in het chatvenster komen\r\n\tconst [messages, setMessages] = useState([]);\r\n    // De referentie naar het chatvenster\r\n\tconst chatDisplayRef = useRef(null);\r\n    // Functionaliteit van de chatbot\r\n\tconst { reply: botReply, setAddToDisplay, botReady } = useChatbot();\r\n\r\n    // Wanneer de chatbot wel/niet geïnitialiseerd wordt:\r\n\tuseEffect(() => {\r\n        // Voer volgende code niet uit als de bot niet geïnitialiseerd is\r\n        if (!botReady) return;\r\n\r\n        // Link de 'addToDisplay' functie in aan de chatbot service (store)\r\n\t\tsetAddToDisplay({ callback: addToDisplay });\r\n\t}, [botReady]);\r\n\r\n    // Wanneer er bericht bijkomen:\r\n\tuseEffect(() => {\r\n        // Voer volgende code niet uit als het chatvenster nog niet bestaat is\r\n\t\tif (!chatDisplayRef.current) return;\r\n\r\n        // Scroll naar beneden (naar het nieuwste bericht)\r\n\t\tchatDisplayRef.current.scrollTo({\r\n\t\t\ttop: chatDisplayRef.current.scrollHeight,\r\n\t\t});\r\n\t}, [messages]);\r\n\r\n\t// Voeg een bericht toe aan het chatvenster\r\n\tfunction addToDisplay(message, isUser = false) {\r\n        // Voer volgende code niet uit als het bericht een lege string is\r\n        if (message === '') return;\r\n        \r\n        // Voeg een bericht toe aan de 'messages'-state\r\n\t\tsetMessages((prev) => [\r\n\t\t\t...prev,\r\n\t\t\t{\r\n\t\t\t\tmessage,\r\n\t\t\t\tisUser,\r\n\t\t\t},\r\n\t\t]);\r\n\t}\r\n\r\n\t// Verstuur het bericht\r\n\tasync function send() {\r\n\t\t// Voer volgende code niet uit als er geen input is\r\n\t\tif (inputValue.trim().length < 1) {\r\n\t\t\tsetInputValue('');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Voer volgende code niet uit als er geen input is\r\n\t\tsayAsUser(inputValue);\r\n\r\n\t\t// Reset de input in het de 'inputValue' state (en dus ook het inputveld)\r\n\t\tsetInputValue('');\r\n\t}\r\n\r\n\t// Verstuur een bericht in naam van de gebruiker\r\n\tasync function sayAsUser(message) {\r\n\t\t// Voeg het bericht toe aan het chatvenster\r\n\t\taddToDisplay(message.trim(), true);\r\n\r\n\t\t// Verwerk het bericht door de chatbot en krijg een gepast antwoord\r\n\t\tconst reply = await botReply(message);\r\n\r\n\t\t// Voeg het antwoord toe aan het chatvenster\r\n\t\taddToDisplay(reply.trim());\r\n\t}\r\n\r\n\t// Luister naar veranderingen van het inputveld\r\n\tfunction onInputChange(e) {\r\n\t\t// Verwijder de witruimte van de input en sla deze op\r\n\t\tsetInputValue(e.target.value);\r\n\t}\r\n\r\n\t// Luister naar het klikken op de 'Verstuur'-knop (en het drukken op de Enter-toets)\r\n\tfunction onSubmit(e) {\r\n\t\t// Voorkom dat het scherm ververst wordt\r\n\t\te.preventDefault();\r\n\r\n\t\t// Verstuur de opgeslagen input\r\n\t\tsend();\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"chatContainer\">\r\n\t\t\t<div className=\"chatDisplay\" ref={chatDisplayRef}>\r\n\t\t\t\t{messages.map((messageObject, index) => (\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tkey={`message-${index}`}\r\n\t\t\t\t\t\tclassName={classNames(\r\n\t\t\t\t\t\t\t'chatMessage',\r\n\t\t\t\t\t\t\t`${messageObject.isUser && 'chatMessage--user'}`\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{messageObject.message}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t\t<form className=\"chatForm\" autoComplete=\"off\" onSubmit={onSubmit}>\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName=\"chatInput\"\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tname=\"chatInput\"\r\n\t\t\t\t\tid=\"chatInput\"\r\n\t\t\t\t\tonChange={onInputChange}\r\n\t\t\t\t\tvalue={inputValue}\r\n\t\t\t\t\tautoFocus\r\n\t\t\t\t/>\r\n\t\t\t\t<button type=\"submit\" className=\"chatSend\">\r\n\t\t\t\t\tVerstuur\r\n\t\t\t\t</button>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React from 'react';\nimport './app.scss';\n\nimport Frank from './assets/frank-deboosere.jpg';\nimport { ChatDisplay } from './components';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<header className=\"appHeader container\">\n\t\t\t\t<div className=\"inner\">\n\t\t\t\t\t<img src={Frank} alt=\"Frank Deboosere\" />\n\t\t\t\t\t<h1>Frankbot</h1>\n\t\t\t\t</div>\n\t\t\t</header>\n\t\t\t<main className=\"appMain container fullHeight\">\n\t\t\t\t<div className=\"inner fullHeight\">\n\t\t\t\t\t<ChatDisplay />\n\t\t\t\t</div>\n\t\t\t</main>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App.jsx';\nimport { ChatbotProvider } from './app/services';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<ChatbotProvider>\n\t\t\t<App />\n\t\t</ChatbotProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);"],"sourceRoot":""}